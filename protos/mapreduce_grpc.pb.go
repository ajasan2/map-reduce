// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterWorkerClient is the client API for MasterWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterWorkerClient interface {
	ExecuteMap(ctx context.Context, in *Shard, opts ...grpc.CallOption) (*Response, error)
	ExecuteReduce(ctx context.Context, in *ReduceRequest, opts ...grpc.CallOption) (*Response, error)
}

type masterWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterWorkerClient(cc grpc.ClientConnInterface) MasterWorkerClient {
	return &masterWorkerClient{cc}
}

func (c *masterWorkerClient) ExecuteMap(ctx context.Context, in *Shard, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mapreduce.MasterWorker/ExecuteMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterWorkerClient) ExecuteReduce(ctx context.Context, in *ReduceRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mapreduce.MasterWorker/ExecuteReduce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterWorkerServer is the server API for MasterWorker service.
// All implementations must embed UnimplementedMasterWorkerServer
// for forward compatibility
type MasterWorkerServer interface {
	ExecuteMap(context.Context, *Shard) (*Response, error)
	ExecuteReduce(context.Context, *ReduceRequest) (*Response, error)
	mustEmbedUnimplementedMasterWorkerServer()
}

// UnimplementedMasterWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedMasterWorkerServer struct {
}

func (UnimplementedMasterWorkerServer) ExecuteMap(context.Context, *Shard) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteMap not implemented")
}
func (UnimplementedMasterWorkerServer) ExecuteReduce(context.Context, *ReduceRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteReduce not implemented")
}
func (UnimplementedMasterWorkerServer) mustEmbedUnimplementedMasterWorkerServer() {}

// UnsafeMasterWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterWorkerServer will
// result in compilation errors.
type UnsafeMasterWorkerServer interface {
	mustEmbedUnimplementedMasterWorkerServer()
}

func RegisterMasterWorkerServer(s grpc.ServiceRegistrar, srv MasterWorkerServer) {
	s.RegisterService(&MasterWorker_ServiceDesc, srv)
}

func _MasterWorker_ExecuteMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Shard)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterWorkerServer).ExecuteMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapreduce.MasterWorker/ExecuteMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterWorkerServer).ExecuteMap(ctx, req.(*Shard))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterWorker_ExecuteReduce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReduceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterWorkerServer).ExecuteReduce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapreduce.MasterWorker/ExecuteReduce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterWorkerServer).ExecuteReduce(ctx, req.(*ReduceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterWorker_ServiceDesc is the grpc.ServiceDesc for MasterWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mapreduce.MasterWorker",
	HandlerType: (*MasterWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteMap",
			Handler:    _MasterWorker_ExecuteMap_Handler,
		},
		{
			MethodName: "ExecuteReduce",
			Handler:    _MasterWorker_ExecuteReduce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mapreduce.proto",
}

// MasterMasterClient is the client API for MasterMaster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterMasterClient interface {
	PushState(ctx context.Context, in *State, opts ...grpc.CallOption) (*Response, error)
}

type masterMasterClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterMasterClient(cc grpc.ClientConnInterface) MasterMasterClient {
	return &masterMasterClient{cc}
}

func (c *masterMasterClient) PushState(ctx context.Context, in *State, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mapreduce.MasterMaster/PushState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterMasterServer is the server API for MasterMaster service.
// All implementations must embed UnimplementedMasterMasterServer
// for forward compatibility
type MasterMasterServer interface {
	PushState(context.Context, *State) (*Response, error)
	mustEmbedUnimplementedMasterMasterServer()
}

// UnimplementedMasterMasterServer must be embedded to have forward compatible implementations.
type UnimplementedMasterMasterServer struct {
}

func (UnimplementedMasterMasterServer) PushState(context.Context, *State) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushState not implemented")
}
func (UnimplementedMasterMasterServer) mustEmbedUnimplementedMasterMasterServer() {}

// UnsafeMasterMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterMasterServer will
// result in compilation errors.
type UnsafeMasterMasterServer interface {
	mustEmbedUnimplementedMasterMasterServer()
}

func RegisterMasterMasterServer(s grpc.ServiceRegistrar, srv MasterMasterServer) {
	s.RegisterService(&MasterMaster_ServiceDesc, srv)
}

func _MasterMaster_PushState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(State)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterMasterServer).PushState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mapreduce.MasterMaster/PushState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterMasterServer).PushState(ctx, req.(*State))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterMaster_ServiceDesc is the grpc.ServiceDesc for MasterMaster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterMaster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mapreduce.MasterMaster",
	HandlerType: (*MasterMasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushState",
			Handler:    _MasterMaster_PushState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mapreduce.proto",
}
